# తెలుగు_టార్చ్.py - తెలుగులో టార్చ్ ప్రోగ్రామింగ్ లైబ్రరీ

import math

class టెన్సర్:
    def __init__(self, డేటా, ఆకారం):
        self.డేటా = డేటా
        self.ఆకారం = ఆకారం

    def __str__(self):
        return f"టెన్సర్(డేటా={self.డేటా}, ఆకారం={self.ఆకారం})"

    def ఆకారం(self):
        return self.ఆకారం

def టెన్సర్_సృష్టించు(డేటా, ఆకారం):
    return టెన్సర్(డేటా, ఆకారం)

def శూన్యాలు(ఆకారం):
    return టెన్సర్([0] * math.prod(ఆకారం), ఆకారం)

def ఒకటులు(ఆకారం):
    return టెన్సర్([1] * math.prod(ఆకారం), ఆకారం)

def కూడిక(టెన్సర్1, టెన్సర్2):
    if టెన్సర్1.ఆకారం != టెన్సర్2.ఆకారం:
        raise ValueError("టెన్సర్ల ఆకారాలు సమానంగా ఉండాలి")
    కొత్త_డేటా = [a + b for a, b in zip(టెన్సర్1.డేటా, టెన్సర్2.డేటా)]
    return టెన్సర్(కొత్త_డేటా, టెన్సర్1.ఆకారం)

def తీసివేత(టెన్సర్1, టెన్సర్2):
    if టెన్సర్1.ఆకారం != టెన్సర్2.ఆకారం:
        raise ValueError("టెన్సర్ల ఆకారాలు సమానంగా ఉండాలి")
    కొత్త_డేటా = [a - b for a, b in zip(టెన్సర్1.డేటా, టెన్సర్2.డేటా)]
    return టెన్సర్(కొత్త_డేటా, టెన్సర్1.ఆకారం)

def గుణకారం(టెన్సర్1, టెన్సర్2):
    if టెన్సర్1.ఆకారం != టెన్సర్2.ఆకారం:
        raise ValueError("టెన్సర్ల ఆకారాలు సమానంగా ఉండాలి")
    కొత్త_డేటా = [a * b for a, b in zip(టెన్సర్1.డేటా, టెన్సర్2.డేటా)]
    return టెన్సర్(కొత్త_డేటా, టెన్సర్1.ఆకారం)

# ఉదాహరణ వినియోగం
if __name__ == "__main__":
    a = టెన్సర్_సృష్టించు([1, 2, 3, 4], (2, 2))
    b = టెన్సర్_సృష్టించు([5, 6, 7, 8], (2, 2))

    print("a:", a)
    print("b:", b)
    print("a + b:", కూడిక(a, b))
    print("a - b:", తీసివేత(a, b))
    print("a * b:", గుణకారం(a, b))
    print("శూన్యాలు:", శూన్యాలు((2, 2)))
    print("ఒకటులు:", ఒకటులు((2, 2)))
