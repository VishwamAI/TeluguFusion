# తెలుగు జిమ్ - తెలుగులో రీఇన్ఫోర్స్మెంట్ లెర్నింగ్ పర్యావరణం

import random
import math

class పర్యావరణం:
    def __init__(self):
        self.స్థితి = None
        self.చర్య_స్థలం = None
        self.పరిశీలన_స్థలం = None

    def ప్రారంభించు(self):
        raise NotImplementedError("ప్రారంభించు() పద్ధతిని అమలు చేయాలి")

    def అడుగు_వేయి(self, చర్య):
        raise NotImplementedError("అడుగు_వేయి() పద్ధతిని అమలు చేయాలి")

    def పరిశీలించు(self):
        raise NotImplementedError("పరిశీలించు() పద్ధతిని అమలు చేయాలి")

class సరళ_గ్రిడ్_ప్రపంచం(పర్యావరణం):
    def __init__(self, పరిమాణం=5):
        super().__init__()
        self.పరిమాణం = పరిమాణం
        self.స్థితి = [0, 0]
        self.లక్ష్యం = [పరిమాణం-1, పరిమాణం-1]
        self.చర్య_స్థలం = ["ఎగువ", "దిగువ", "ఎడమ", "కుడి"]
        self.పరిశీలన_స్థలం = [i for i in range(పరిమాణం * పరిమాణం)]

    def ప్రారంభించు(self):
        self.స్థితి = [0, 0]
        return self.స్థితి[0] * self.పరిమాణం + self.స్థితి[1]

    def అడుగు_వేయి(self, చర్య):
        if చర్య == "ఎగువ" and self.స్థితి[0] > 0:
            self.స్థితి[0] -= 1
        elif చర్య == "దిగువ" and self.స్థితి[0] < self.పరిమాణం - 1:
            self.స్థితి[0] += 1
        elif చర్య == "ఎడమ" and self.స్థితి[1] > 0:
            self.స్థితి[1] -= 1
        elif చర్య == "కుడి" and self.స్థితి[1] < self.పరిమాణం - 1:
            self.స్థితి[1] += 1

        ముగిసింది = (self.స్థితి == self.లక్ష్యం)
        బహుమతి = 1 if ముగిసింది else -0.1

        return (self.స్థితి[0] * self.పరిమాణం + self.స్థితి[1], బహుమతి, ముగిసింది)

    def పరిశీలించు(self):
        return self.స్థితి[0] * self.పరిమాణం + self.స్థితి[1]

class క్యూ_అభ్యాసకుడు:
    def __init__(self, చర్య_స్థలం_పరిమాణం, పరిశీలన_స్థలం_పరిమాణం):
        self.క్యూ_పట్టిక = [[0 for _ in range(చర్య_స్థలం_పరిమాణం)] for _ in range(పరిశీలన_స్థలం_పరిమాణం)]
        self.గామా = 0.9
        self.ఆల్ఫా = 0.1
        self.ఎప్సిలాన్ = 0.1

    def చర్య_ఎంచుకోండి(self, స్థితి):
        if random.random() < self.ఎప్సిలాన్:
            return random.randint(0, len(self.క్యూ_పట్టిక[స్థితి]) - 1)
        else:
            return max(range(len(self.క్యూ_పట్టిక[స్థితి])), key=lambda x: self.క్యూ_పట్టిక[స్థితి][x])

    def నేర్చుకోండి(self, స్థితి, చర్య, బహుమతి, తదుపరి_స్థితి):
        ప్రస్తుత_క్యూ = self.క్యూ_పట్టిక[స్థితి][చర్య]
        అత్యధిక_తదుపరి_క్యూ = max(self.క్యూ_పట్టిక[తదుపరి_స్థితి])
        నవీకరణ = బహుమతి + self.గామా * అత్యధిక_తదుపరి_క్యూ - ప్రస్తుత_క్యూ
        self.క్యూ_పట్టిక[స్థితి][చర్య] += self.ఆల్ఫా * నవీకరణ

def శిక్షణ(పర్యావరణం, అభ్యాసకుడు, ఎపిసోడ్లు=1000):
    for ఎపిసోడ్ in range(ఎపిసోడ్లు):
        స్థితి = పర్యావరణం.ప్రారంభించు()
        ముగిసింది = False

        while not ముగిసింది:
            చర్య = అభ్యాసకుడు.చర్య_ఎంచుకోండి(స్థితి)
            తదుపరి_స్థితి, బహుమతి, ముగిసింది = పర్యావరణం.అడుగు_వేయి(పర్యావరణం.చర్య_స్థలం[చర్య])
            అభ్యాసకుడు.నేర్చుకోండి(స్థితి, చర్య, బహుమతి, తదుపరి_స్థితి)
            స్థితి = తదుపరి_స్థితి

        if (ఎపిసోడ్ + 1) % 100 == 0:
            print(f"ఎపిసోడ్ {ఎపిసోడ్ + 1} పూర్తయింది")

if __name__ == "__main__":
    పర్యావరణం = సరళ_గ్రిడ్_ప్రపంచం()
    అభ్యాసకుడు = క్యూ_అభ్యాసకుడు(len(పర్యావరణం.చర్య_స్థలం), len(పర్యావరణం.పరిశీలన_స్థలం))

    print("శిక్షణ ప్రారంభమవుతోంది...")
    శిక్షణ(పర్యావరణం, అభ్యాసకుడు)
    print("శిక్షణ పూర్తయింది!")

    # శిక్షణ పొందిన విధానాన్ని ప్రదర్శించండి
    స్థితి = పర్యావరణం.ప్రారంభించు()
    ముగిసింది = False
    అడుగులు = 0

    print("\nశిక్షణ పొందిన విధానం ప్రదర్శన:")
    while not ముగిసింది and అడుగులు < 20:
        చర్య = అభ్యాసకుడు.చర్య_ఎంచుకోండి(స్థితి)
        print(f"స్థితి: {స్థితి // పర్యావరణం.పరిమాణం, స్థితి % పర్యావరణం.పరిమాణం}, చర్య: {పర్యావరణం.చర్య_స్థలం[చర్య]}")
        స్థితి, _, ముగిసింది = పర్యావరణం.అడుగు_వేయి(పర్యావరణం.చర్య_స్థలం[చర్య])
        అడుగులు += 1

    if ముగిసింది:
        print("లక్ష్యాన్ని చేరుకున్నాము!")
    else:
        print("గరిష్ట అడుగుల సంఖ్య చేరుకున్నాము.")
