// తెలుగుఫ్యూజన్ పరీక్ష కేసులు

దిగుమతి వ్యవస్థ;
దిగుమతి గణితం;
దిగుమతి డేటాబేస్;
దిగుమతి వెబ్;

// 1. పార్సింగ్ పరీక్షలు
ప్రమేయం పార్సింగ్_పరీక్షలు() {
    // 1.1 సాధారణ వ్యక్తీకరణ పార్సింగ్
    చర ఎ = 5 + 3 * 2;
    అభ్యర్థించు(ఎ == 11, "సాధారణ వ్యక్తీకరణ పార్సింగ్ విఫలమైంది");

    // 1.2 తెలుగు గుర్తింపుదారులు
    చర తెలుగుచర = 10;
    అభ్యర్థించు(తెలుగుచర == 10, "తెలుగు గుర్తింపుదారు పార్సింగ్ విఫలమైంది");

    // 1.3 యూనికోడ్ వ్యాఖ్యలు
    // ఇది ఒక తెలుగు వ్యాఖ్య
    అభ్యర్థించు(నిజం, "యూనికోడ్ వ్యాఖ్య పార్సింగ్ విఫలమైంది");

    // 1.4 సంకీర్ణ వ్యక్తీకరణ పార్సింగ్
    చర సంకీర్ణవ్యక్తీకరణ = (5 + 3) * 2 - (10 / 2);
    అభ్యర్థించు(సంకీర్ణవ్యక్తీకరణ == 11, "సంకీర్ణ వ్యక్తీకరణ పార్సింగ్ విఫలమైంది");
}

// 2. అర్థ విశ్లేషణ పరీక్షలు
ప్రమేయం అర్థవిశ్లేషణ_పరీక్షలు() {
    // 2.1 రకం తనిఖీ
    చర సంఖ్య: పూర్ణం = 5;
    చర దశాంశం: తేలియాడు = 3.14;
    అభ్యర్థించు(రకం(సంఖ్య) == పూర్ణం && రకం(దశాంశం) == తేలియాడు, "రకం తనిఖీ విఫలమైంది");

    // 2.2 పరిధి తనిఖీ
    {
        చర స్థానికచర = 10;
    }
    ప్రయత్నించు {
        వ్యవస్థ.బయటకు << స్థానికచర;
        అభ్యర్థించు(తప్పు, "పరిధి తనిఖీ విఫలమైంది");
    } పట్టుకో (దోషం) {
        అభ్యర్థించు(నిజం, "పరిధి తనిఖీ విజయవంతమైంది");
    }

    // 2.3 రకం అనుమానం
    చర అనుమానితరకం = 42;
    అభ్యర్థించు(రకం(అనుమానితరకం) == పూర్ణం, "రకం అనుమానం విఫలమైంది");
}

// 3. అధునాతన గణిత కార్యకలాపాల పరీక్షలు
ప్రమేయం గణిత_పరీక్షలు() {
    // 3.1 మాట్రిక్స్ గుణకారం
    చర మాట్రిక్స్1 = [[1, 2], [3, 4]];
    చర మాట్రిక్స్2 = [[5, 6], [7, 8]];
    చర ఫలితం = గణితం.మాట్రిక్స్_గుణకారం(మాట్రిక్స్1, మాట్రిక్స్2);
    అభ్యర్థించు(ఫలితం == [[19, 22], [43, 50]], "మాట్రిక్స్ గుణకారం విఫలమైంది");

    // 3.2 మాట్రిక్స్ విలోమం
    చర విలోమం = గణితం.మాట్రిక్స్_విలోమం(మాట్రిక్స్1);
    అభ్యర్థించు(గణితం.మాట్రిక్స్_సమానం(గణితం.మాట్రిక్స్_గుణకారం(మాట్రిక్స్1, విలోమం), [[1, 0], [0, 1]]), "మాట్రిక్స్ విలోమం విఫలమైంది");

    // 3.3 సాంఖ్యిక పరిక్రియలు
    చర డేటా = [1, 2, 3, 4, 5];
    చర సగటు = గణితం.సగటు(డేటా);
    చర ప్రమాణవ్యతిరేకం = గణితం.ప్రమాణవ్యతిరేకం(డేటా);
    అభ్యర్థించు(సగటు == 3 && ప్రమాణవ్యతిరేకం ≈ 1.4142, "సాంఖ్యిక పరిక్రియలు విఫలమైంది");
}

// 4. ఏజెంట్-ఆధారిత ప్రవర్తన పరీక్షలు
ప్రమేయం ఏజెంట్_పరీక్షలు() {
    ఏజెంట్ రోబో {
        చర స్థానం = 0;
        ప్రమేయం కదులు(పూర్ణం దూరం) {
            స్థానం += దూరం;
        }
        ప్రమేయం స్థితిపొందు() -> వాక్యం {
            తిరిగిఇవ్వు "స్థానం: " + స్థానం;
        }
    }

    చర రోబో1 = రోబో();
    చర రోబో2 = రోబో();

    రోబో1.కదులు(5);
    రోబో2.కదులు(3);

    అభ్యర్థించు(రోబో1.స్థానం == 5 && రోబో2.స్థానం == 3, "ఏజెంట్ కదలిక విఫలమైంది");
    అభ్యర్థించు(రోబో1.స్థితిపొందు() == "స్థానం: 5" && రోబో2.స్థితిపొందు() == "స్థానం: 3", "ఏజెంట్ స్థితి పొందడం విఫలమైంది");
}

// 5. వెబ్ అభివృద్ధి సామర్థ్యాల పరీక్షలు
ప్రమేయం వెబ్_పరీక్షలు() {
    చర సర్వర్ = వెబ్.సర్వర్_సృష్టించు();
    సర్వర్.మార్గం("/", ప్రమేయం (అభ్యర్థన, ప్రతిస్పందన) {
        ప్రతిస్పందన.పంపు("నమస్కారం, ప్రపంచం!");
    });
    సర్వర్.మార్గం("/వినియోగదారు/{id}", ప్రమేయం (అభ్యర్థన, ప్రతిస్పందన) {
        చర id = అభ్యర్థన.ప్యారామీటర్పొందు("id");
        ప్రతిస్పందన.JSON_పంపు({"id": id, "పేరు": "వినియోగదారు" + id});
    });

    చర ప్రతిస్పందన1 = వెబ్.అభ్యర్థన_పంపు("http://localhost:8080/");
    అభ్యర్థించు(ప్రతిస్పందన1 == "నమస్కారం, ప్రపంచం!", "సాధారణ మార్గం విఫలమైంది");

    చర ప్రతిస్పందన2 = వెబ్.అభ్యర్థన_పంపు("http://localhost:8080/వినియోగదారు/123");
    అభ్యర్థించు(ప్రతిస్పందన2 == {"id": "123", "పేరు": "వినియోగదారు123"}, "డైనమిక్ మార్గం విఫలమైంది");
}

// 6. డేటాబేస్ పరీక్షలు
ప్రమేయం డేటాబేస్_పరీక్షలు() {
    చర డీబీ = డేటాబేస్.అనుసంధానించు("sqlite:///:memory:");

    // టేబుల్ సృష్టించు
    డీబీ.అమలుచేయి("CREATE TABLE వినియోగదారులు (id INTEGER PRIMARY KEY, పేరు TEXT, వయస్సు INTEGER)");

    // డేటా చేర్చు
    డీబీ.చేర్చు("వినియోగదారులు", {"పేరు": "రాము", "వయస్సు": 30});
    డీబీ.చేర్చు("వినియోగదారులు", {"పేరు": "సీత", "వయస్సు": 28});

    // డేటా పొందు
    చర ఫలితాలు = డీబీ.ప్రశ్న("SELECT * FROM వినియోగదారులు WHERE వయస్సు > 25");
    అభ్యర్థించు(ఫలితాలు.పొడవు() == 2, "డేటాబేస్ ప్రశ్న విఫలమైంది");

    // డేటా నవీకరించు
    డీబీ.నవీకరించు("వినియోగదారులు", {"పేరు": "రాము"}, {"వయస్సు": 31});
    చర నవీకృతఫలితం = డీబీ.ప్రశ్న("SELECT వయస్సు FROM వినియోగదారులు WHERE పేరు = 'రాము'");
    అభ్యర్థించు(నవీకృతఫలితం[0]["వయస్సు"] == 31, "డేటాబేస్ నవీకరణ విఫలమైంది");

    // డేటా తొలగించు
    డీబీ.తొలగించు("వినియోగదారులు", {"పేరు": "సీత"});
    చర మిగిలినఫలితాలు = డీబీ.ప్రశ్న("SELECT * FROM వినియోగదారులు");
    అభ్యర్థించు(మిగిలినఫలితాలు.పొడవు() == 1, "డేటాబేస్ తొలగింపు విఫలమైంది");
}

// ప్రధాన పరీక్ష ప్రమేయం
ప్రమేయం ప్రధానం() {
    పార్సింగ్_పరీక్షలు();
    అర్థవిశ్లేషణ_పరీక్షలు();
    గణిత_పరీక్షలు();
    ఏజెంట్_పరీక్షలు();
    వెబ్_పరీక్షలు();
    డేటాబేస్_పరీక్షలు();
    వ్యవస్థ.బయటకు << "అన్ని పరీక్షలు విజయవంతంగా పూర్తయ్యాయి!" << వ్యవస్థ.ముగింపుపంక్తి;
}
